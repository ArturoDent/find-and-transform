function _findSettingRange(index, settingsText, document) {

	const re = /({)|(})/;
	let brackets = 0;
	// let offset = index;
	let offset = 0;
	let match;

	myFunction (  )

	// count braces until matching closing brace; will be end of this setting
	do {
		match = settingsText.match(re);
		if (match[0] === '{') ++brackets;
		if (match[0] === '}') --brackets;

		if (brackets) {
			offset += match.index + 1;
			settingsText = settingsText.substring(match.index + 1);
		}
		else offset += match.index;
	} while (brackets);

	/** @type { vscode.Position } */
	let settingStartPos;
	let settingEndPos;

	if (index) {
		settingStartPos = document.positionAt(index);  // start of setting
		settingEndPos = document.positionAt(index + offset);  // end of setting
	}
	else return undefined;

	return new vscode.Range(settingStartPos, settingEndPos);
}

---------------------------------

		// a sample command using a hard-written find regex and upperCase replacements
	let disposable = vscode.commands.registerTextEditorCommand('findInCurrentFile.upcaseAllKeywords', async (editor, edit) => {

		const docString = editor.document.getText();
		const re = /(?<!\w)(create|select|sum|drop|table|if|exists|day|group|by|order|min|max|and|else|iif|end|over|partition|distinct|desc)(?!\w)/g;
		const matches = [...docString.matchAll(re)];

		if (matches) {
			matches.forEach((match) => {

				// this matchRange can be used if find matches are single words only
				// const matchRange = editor.document.getWordRangeAtPosition(editor.document.positionAt(match.index));

				// use this matchRange if matches can be more than a single word
				const matchRange = new vscode.Range(editor.document.positionAt(match.index), editor.document.positionAt(match.index + match[0].length));

				edit.replace(matchRange, match[1].toUpperCase());
			});
		}
	});
	context.subscriptions.push(disposable);

	// let newCommand = {};
	// newCommand.command = "findInCurrentFile.upcaseAllKeywords";
	// newCommand.title = "Uppercase all Keywords";
	// newCommand.category = category;
	// settingsJSON.push(newCommand);

	-------------------------------

  "commands": [
		{
		"command": "find-and-transform.searchInFile",
		"title": "Search in this File",
		"category": "Find-Transform"
		},
		{
		"command": "find-and-transform.searchInFolder",
		"title": "Search in this Folder",
		"category": "Find-Transform"
		},
		{
		"command": "find-and-transform.searchInResults",
		"title": "Search in the Results Files",
		"category": "Find-Transform"
		}
	]

		-------------------------------------

		"search.filter": [
    { "config": ["**/*.config", "src/**/*.cscfg"] },
    { "deploy": ["**/deploy", "@config" },
    { "test": ["**/test", "!**/test/log", "!**/test/out"] },
    { "modified": ["@staged", "@unstaged", "@untracked"] },
    { "unmodified": ["!@modified"] },
    { "src": ["!@deploy", "!@test", "@modified"] },
    { "prod": ["@src", "@deploy", "!@modified"] }
]



[no workspace name]
C:\Users\Mark\OneDrive\Test Bed\zip\wwwroot\css\main.scss     copy path  [builtin]
zip\wwwroot\css\main.scss                                     copy relative path  [builtin]

Users/Mark/OneDrive/Test Bed/zip/wwwroot/css/main.txt   ${file}
zip/wwwroot/css/main.txt                                ${relativeFile}
main.txt                                                ${fileBasename}
main                                                    ${fileBasenameNoExtension}
.txt                                                    ${fileExtname}
/c:/Users/Mark/OneDrive/Test Bed/zip/wwwroot/css        ${fileDirname}
zip/wwwroot/css                                         ${relativeFileDirname}
/c:/Users/Mark/OneDrive/Test Bed                        ${fileWorkspaceFolder}
/c:/Users/Mark/OneDrive/Test Bed                        ${workspaceFolder}
Test Bed                                                ${workspaceFolderBasename}



---------------------------------------------------------------------------------

[in Workspace name = 'XX']
C:\Users\Mark\testWorkspace\FolderXX\xxTest1.txt        copy path [builtin]
FolderXX\xxTest1.txt                                    copy relative path [builtin]

Users/Mark/testWorkspace/FolderXX/xxTest1.txt           ${file}
FolderXX/xxTest1.txt                                    ${relativeFile}
xxTest1.txt                                             ${fileBasename}
xxTest1                                                 ${fileBasenameNoExtension}
.txt                                                    ${fileExtname}
/c:/Users/Mark/testWorkspace/FolderXX                   ${fileDirname}
FolderXX                                                ${relativeFileDirname}
/c:/Users/Mark/testWorkspace  /c:/Users/Mark/AA/BB      ${fileWorkspaceFolder}
/c:/Users/Mark/testWorkspace  /c:/Users/Mark/AA/BB      ${workspaceFolder}
testWorkspace BB                                        ${workspaceFolderBasename}

@Column({ nullable: true })
  CharterId: number

  @ManyToOne(() => Charter, (charter) => charter.Flights, { eager: true })
  @JoinColumn({ name: 'CharterId' })
  Charter: Charter