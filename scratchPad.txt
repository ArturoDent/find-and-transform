function _findSettingRange(index, settingsText, document) {

	const re = /({)|(})/;
	let brackets = 0;
	// let offset = index;
	let offset = 0;
	let match;

	// count braces until matching closing brace; will be end of this setting
	do {
		match = settingsText.match(re);
		if (match[0] === '{') ++brackets;
		if (match[0] === '}') --brackets;

		if (brackets) {
			offset += match.index + 1;
			settingsText = settingsText.substring(match.index + 1);
		}
		else offset += match.index;
	} while (brackets);

	/** @type { vscode.Position } */
	let settingStartPos;
	let settingEndPos;

	if (index) {
		settingStartPos = document.positionAt(index);  // start of setting
		settingEndPos = document.positionAt(index + offset);  // end of setting
	}
	else return undefined;

	return new vscode.Range(settingStartPos, settingEndPos);
}

---------------------------------------------------------------------------------------

/**
 * Replace all find matches in the entire document
 *
 * @param {vscode.window.activeTextEditor} editor
 * @param {vscode.TextEditorEdit} edit
 * @param {String} findValue
 * @param {String} replaceValue
 */
function _replaceWholeDocument(editor, edit, findValue, replaceValue) {

	const re = new RegExp(findValue, "gm");
	const firstLine = editor.document.lineAt(0);
	const lastLine = editor.document.lineAt(editor.document.lineCount - 1);
	const matchRange = new vscode.Range(firstLine.range.start, lastLine.range.end);

	let docString = editor.document.getText();
	let doReplace = false;

	if (re.test(docString)) {  // boolean, must be a global regexp

		doReplace = true;
		// find all matches in iteratively reduced docString
		docString = docString.replace(re, (...groups) => {
			return _buildReplaceValue(replaceValue, groups);
		});
	};
	if (doReplace) edit.replace(matchRange, docString);
}

-----------------------------------

function createCommand() {
	const action = new vscode.CodeAction('Learn more...', vscode.CodeActionKind.Source);
	action.command = { command: "findInCurrentFile.upcaseSwap2", title: 'swap iif <==> hello', tooltip: 'You are a superstar!!' };
	return action;
}

---------------------------------

		// a sample command using a hard-written find regex and upperCase replacements
	let disposable = vscode.commands.registerTextEditorCommand('findInCurrentFile.upcaseAllKeywords', async (editor, edit) => {

		const docString = editor.document.getText();
		const re = /(?<!\w)(create|select|sum|drop|table|if|exists|day|group|by|order|min|max|and|else|iif|end|over|partition|distinct|desc)(?!\w)/g;
		const matches = [...docString.matchAll(re)];

		if (matches) {
			matches.forEach((match) => {

				// this matchRange can be used if find matches are single words only
				// const matchRange = editor.document.getWordRangeAtPosition(editor.document.positionAt(match.index));

				// use this matchRange if matches can be more than a single word
				const matchRange = new vscode.Range(editor.document.positionAt(match.index), editor.document.positionAt(match.index + match[0].length));

				edit.replace(matchRange, match[1].toUpperCase());
			});
		}
	});
	context.subscriptions.push(disposable);

	// let newCommand = {};
	// newCommand.command = "findInCurrentFile.upcaseAllKeywords";
	// newCommand.title = "Uppercase all Keywords";
	// newCommand.category = category;
	// settingsJSON.push(newCommand);