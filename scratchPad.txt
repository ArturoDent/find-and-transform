---------------------------- from extension.js -----------------------------------------------------

let continueRun = true;

if (args?.preCommands) await extensionCommands.runPrePostCommands(args.preCommands, "preCommands");

let replacement = "";
if (Array.isArray(args?.replace)) replacement = args?.replace.join(' ');
else if (args?.replace) replacement = args?.replace;
if (replacement?.search(/\$\{resultsFiles\}/) !== -1) args.resultsFiles = await utilities.getSearchResultsFiles(args.clipText);

// could be an array of 1 : ["$${ return 'howdy', }$$"] or ["howdy $${ return 'pardner', }$$"]
// call a function that looks for all jsOp's $${...}$$ in args.replace
if (args && Array.isArray(args.replace) && args.replace.find(el => el.search(/^\s*\$\$\{\s*/m) !== -1))
  args.replace = await parseCommands.buildJSOperationsFromArgs(args.replace);
  
if (args && Array.isArray(args.run) && args.run.find(el => el.search(/^\s*\$\$\{\s*/m) !== -1))
  args.run = await parseCommands.buildJSOperationsFromArgs(args.run);

const argsBadObject = await utilities.checkArgs(args, "findBinding");

if (Object.entries(argsBadObject).length) {  // send to utilities function
  await utilities.writeBadArgsToOutputChannel(argsBadObject);
  return;    // abort
}

if (args && enableWarningDialog) {
  // boolean modal or not?
  if (argsBadObject.length) continueRun = await utilities.showBadKeyValueMessage(argsBadObject, true, "");
}

if (continueRun) {		
  if (!args) args = { title: "Keybinding for generic command run" };
  else if (!args.title) args.title = "Keybinding for generic command run";

  await parseCommands.splitFindCommands(editor, edit, args);
}

--------------------------------- from registerFindCOmmands -----------------------------------------------------------

if (enableWarningDialog) {
	const argsBadObject = await utilities.checkArgs(argArray[elem][1], "findSetting");
	// boolean modal or not
	if (argsBadObject.length) continueRun = await utilities.showBadKeyValueMessage(argsBadObject, false, argArray[elem][0]);
}

if (Array.isArray(argArray[elem][1].replace) && argArray[elem][1].replace.find(el => el === "$${"))
  argArray[elem][1].replace = await parseCommands.buildJSOperationsFromArgs(argArray[elem][1].replace);

if (Array.isArray(argArray[elem][1].run) && argArray[elem][1].run.find(el => el === "$${"))
  argArray[elem][1].run = await parseCommands.buildJSOperationsFromArgs(argArray[elem][1].run);
  
// if (args && Array.isArray(args.run) && args.run.find(el => el.search(/^\s*\$\$\{\s*/m) !== -1))
//   args.run = await parseCommands.buildJSOperationsFromArgs(args.run);
  
if (argArray[elem][1].preCommands) {
  await this.runPrePostCommands(argArray[elem][1].preCommands, "preCommands");
}

if (continueRun) await parseCommands.splitFindCommands(editor, edit, argArray[elem][1]);